Faced Question Javascript:-
0.ES6 All new Features?
Ans -
I. Classes
II. Enhanced Object Literals
III. Template Strings
IV. Destructuring
V. Default + Rest + Spread :
=>
Rest parameters are similar to variable arguments in Java. 
Rest parameters doesn’t restrict the number of
values that you can pass to a function. However, the values passed must all be of the same type. In other words,
rest parameters act as placeholders for multiple arguments of the same type.
The following example illustrates the same.
function fun1(...params) {
   console.log(params.length);
}
fun1();
fun1(5);
fun1(5, 6, 7);
The following output is displayed on successful execution of the above code.
0
1
3
VI. Let + Const
VII. Iterators + For..Of
VIII. Generators
IX. Modules
X. Module Loaders

--------------------------------------------------------
1.what is set method used in javascript ?
2.how to return random item from Array?
3.what is event.delegate in javascript ?
4.Is javacript loosily type or stirct type?
5.Features of using Javascript?
6.What is cross domain Error ?
7.what are HTTP Headers used for ?
8. Can we do inheritance in es5 ?
9. Call Vs Apply Vs Bind? (Ans:https://medium.com/@leonardobrunolima/javascript-tips-apply-vs-call-vs-bind-d738a9e8b4e1)
10.Javascript Bind Vs Arrow Function.
11. what is Object.Keys ?
12. diff. b/w normal func. and arrow func. ?
13.what is Object.assign used for ?
14.Simple Closure Example?
15.write a program to square array elements.?
16.Does map() function need a return statement ?
17.Difference b/w map() each and forEach() ?
18.what is functional programming ? is js a functional programming language ?
19. Difference b/w Object based and object Oriented?
Ans -
Difference between Object-oriented and Object-based languages. 
Object-oriented language supports all the features of OOPs 
(Abstraction, Encapsulation, Inheritance, Polymorphism). 
Object-based languages don't 
support all the features of OOPs like polymorphism or inheritance. 
20.Object.keys Vs Object.values Vs Object.entries Vs Object.defineProperty
21.Object.freze Vs Object.seel
21.what is async await used for ?
22.we can get array items despite setTimeout is zero?
23.string to array conversion?
24.converting object to array? (Map always return object as an array)
25.converting array to object ?
26.check an array for null or undefined values?
27.checking for empty array?
28.checking duplicate value in array -
1st way:
let array1 = [5,6,7,8,13,8,6];
function dublicateFunction(arg) { 
	return arg.filter((item,i) => arg.indexOf(arg[i]) !== i);
}
console.log(dublicateFunction(array1));// [8,6]
29. difference between let and var?
30.what will be the output of below -
function sum(a,b) {
	console.log(a+b);
}

sum(2+4+"4"+1+2,5+8+null+"1+3"); //  "6412131+3"
----
console.log(6+4 + "4" + 9+9+2+'ert'+5); // "104992ert5"
----
console.log(6+4 + "4" + 9+9+2+'ert'+5 -3); // "NAN"
----
console.log(6+4 + "4" + 9+9+2+"2"+5); //"10499225"
29.closures?
30.datatype in js?
31.How to check palindrome string
32.How to convert Array elements into string ?
33.If you want to call a function inside another function
34.For loop with var and let
console.log(i)
for(i=0;i<=5;i++){
console.log(i)
}
console.log(i);
35.types of Ajex call? Fetch vs axios vs async await?
36.Higher Order functions in JS?
37.Event Bubbling in JS?
38.Compare two array in JS?
39.What types of errors we get in browser when do api call or ajex call.
40.How to convert string to integer not using parseint?
41.function add(a, b = 1) {
   return a + b;
}
var res = add(4,5);
console.log(res); // 9
42.how to store data in local storage, get and set items?
43.var foo = 'bar'
var baz = { foo }
console.log(baz.foo)
The following output is displayed on successful execution of the above code.
bar
43.Js delete existing object property?
Ans-
var Object = {name: "san", age:21}
delete Object;
console.log(Object) // Object { name: "san", age: 21 }
delete Object.name
console.log(Objct); // Object { age: 21 }
44.filter()
Creates a new array with all of the elements of this array for which the provided filtering function returns true.
forEach()
Calls a function for each element in the array.
join()
Joins all elements of an array into a string.
pop()
Removes the last element from an array and returns that element
push()
Adds one or more elements to the end of an array and returns the new length of the array.
reverse()
Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.
shift()
Removes the first element from an array and returns that element slice.
slice()
Extracts a section of an array and returns a new array.
sort()
Sorts the elements of an array.
splice()
Adds and/or removes elements from an array.
unshift()
Adds one or more elements to the front of an array and returns the new length of the array.
find()
every()

45.The get() function is used to retrieve the value corresponding to the specified key.

var roles = new Map([

   ['r1', 'User'],

   ['r2', 'Guest'],

   ['r3', 'Admin'],

]);

console.log(roles.get('r2')) //output Guest
46.The Super Keyword
ES6 enables a child class to invoke its parent class data member. This is achieved by using the super keyword.
The super keyword is used to refer to the immediate parent of a class.
'use strict'
class PrinterClass {
   doPrint() {
      console.log("doPrint() from Parent called…")
   }
}

class StringPrinter extends PrinterClass {
   doPrint() {
      super.doPrint()
      console.log("doPrint() is printing a string…")
   }
}
var obj = new StringPrinter()
obj.doPrint()
//output
doPrint() from Parent called.
doPrint() is printing a string.
50. Hoisting in JS?
Ans -
function hoisting:-
hoist_function();
function hoist_function() {
   console.log("foo");
}
The following output is displayed on successful execution of the above code.
foo
However, function expressions cannot be hoisted. The following code snippet illustrates the same.
hoist_function(); // TypeError: hoist_function() is not a function
var hoist_function() = function() {   
console.log("bar");
};
51.
